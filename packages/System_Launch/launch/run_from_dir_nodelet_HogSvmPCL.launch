<launch>

  <!-- Dataset parameters -->
  <arg name="classifierDir" default="Kinect"/>
  <!--arg name="classifierDir" default="Stereo"/-->
  <arg name="cameraInfoFilename" default="$(env NIST_CLASSIFIERS)/$(arg classifierDir)/cameraInfo.yml"/>
  <arg name="directory" default="$(env NIST_IMAGES)"/>
  <arg name="replayRate" default="30."/>
  
  <!-- Play files from folder -->
  <node name="ImagePublisher" pkg="imagePublisher" type="imagePublisher">
    <param name="imageFolderPath" value="$(arg directory)"/>
    <param name="replayRate"      value="$(arg replayRate)"/>
    <param name="cameraInfoFilename"      value="$(arg cameraInfoFilename)"/>	
    <param name="delayStart"      value="0"/>
    <param name="images_with_timestamp"      value="true"/>
  </node>
  
  <!--launch the nodelet manager -->
  <node  pkg="nodelet" type="nodelet" name="MNode" args="manager" />	

  <!-- Launch consistency nodelet -->
  <node  pkg="nodelet" type="nodelet" name="Cons" args="load consistency/consistencyNodelet MNode" output="screen">	
	<param name="Q_Size" value="2" />
	<param name="UseDefaultRois" type="bool" value="true" />
	<param name="mode" value="load"/>
	<param name="label" 	 type="int"    value="1"  />
	<param name="yaml_filename" type="string" value="$(env NIST_CLASSIFIERS)/$(arg classifierDir)/constraints.yml"/>
	<param name="max_training_samples" type="int" value="115"/>
        <param name="Kinect_Disparity_Fix" value="true"/>	
	<remap from="input_rois" to="output_rois" />
	<remap from="Color_Image" to="/camera/rgb/image_color" />
	<remap from="Disparity_Image" to="/camera/depth/disparity" />
	<param name="RemoveOverlappingRois" value="true"/>
   </node>

   <!-- Launch HogSvmPCL Nodelet -->
   <node  pkg="nodelet" type="nodelet" name="HogSvmPCL" args="load HogSvmPCL/hogsvmpcl_nodelet MNode" output="screen">	
       <param name="Q_Size" value="2" />
       <remap from="Color_Image" to="ConsistencyColorImage"/>	
       <remap from="Disparity_Image" to="ConsistencyDisparityImage"/>
       <remap from="input_rois" to="ConsistencyOutputRois"/>
       <!--param name="classifier_file" value="$(env NIST_CLASSIFIERS)/$(arg classifierDir)/HogSvmPCL.yaml"/-->
       <param name="classifier_file" value="$(env NIST_CLASSIFIERS)/$(arg classifierDir)/HogSvmPCL_half.yaml"/>
       <param name="Mode" value="1"/>
       <param name="HogSvmThreshold" value="-0.975"/>
       <param name="RemoveOverlappingRois" value="true"/>
       <param name="MaxOverlap" value="0.3"/>
   </node> 

   <!-- display the rois -->
   <!--node pkg="roiViewer" type="roiViewer" name="ConsistencyViewer" >
        <param name="mode" type="string" value="roi_display"/> 
        <param name="label" type="int" value="1" />
	<remap from ="input_image" to="ConsistencyColorImage"/>
	<remap from ="input_rois" to="ConsistencyOutputRois"/>  
   </node-->
   
   <!-- display the rois -->
   <node pkg="roiViewer" type="roiViewer" name="HogSvmViewer" >
        <param name="mode" type="string" value="roi_display"/> 
        <param name="label" type="int" value="1" />
	<remap from ="input_image" to="HogSvmColorImage"/>
	<remap from ="input_rois" to="HogSvmOutputRois"/>  
   </node>
   
     <!-- Launch Tracking Node-->
  <node name="TrackNode" pkg="object_tracking" type="object_tracking_node" output="screen">	
       <param name="Q_Size" value="2" />
       <remap from="Color_Image" to="HogSvmColorImage"/>	
       <remap from="Disparity_Image" to="HogSvmDisparityImage"/>
       <remap from="input_rois" to="HogSvmOutputRois"/>
       <remap from="l_camera_info" to="camera/depth_registered/camera_info"/>
       <remap from="r_camera_info" to="camera/projector/camera_info"/>
       <param name="Filter_Dir" value="$(find object_tracking)/perception_data" />
       <param name="Calculate_Covariance" value="true" />
       <param name="CSV_Filename" value="/home/matteo/nodelets_10fps_HogSvmPCL_Hog-0975_Ov03_Half.csv" />
       <param name="Show_Images" value="true" />
       <param name="Write_image_results" value="true" />
       <param name="Debug_mode" value="false" />
  </node> 

</launch>
