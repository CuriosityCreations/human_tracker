<launch>

  <arg name="directory" default="negExamples"/>


  <!-- Launch consisteny node -->
  <node pkg="consistency" type="consistency" name="consistency" >
	<!-- mode = {accumulate,load} -->
	<param name="Q_Size" value="2" />
	<param name="UseDefaultRois" type="bool" value="true" />
	<param name="mode" type="string" value="load"/>
	<param name="label" 	 type="int"    value="1"  />
	<param name="filename" type="string" value="$(find consistency)/yml/constraints.yml"/>
	<param name="max_training_samples" type="int" value="115"/>
	<remap from="input_rois" to="output_rois" />
	<remap from="Color_Image" to="/camera/rgb/image_color" />
	<remap from="Disparity_Image" to="/camera/depth/disparity" />
   </node>

   <!-- Launch HaarAda Node-->
   <node name="HaarAdaNode" pkg="HaarAda" type="HaarAda174" output="screen" >	
	<param name="Q_Size" value="2" />
	<param name="RemoveOverlappingRois" type="bool" value="true" />
        <remap from="Color_Image" to="ConsistencyColorImage"/>	
        <remap from="Disparity_Image" to="ConsistencyDisparityImage"/>
        <remap from="input_rois" to="ConsistencyOutputRois"/>
        <!--mode={detect,train,load,accumulate} -->
        <param name="mode" value="load"/>
        <param name="classifier_file" value="$(find HaarAda)/classifiers/HaarAda.xml"/>
        <param name="num_Training_Samples" value="1000"/>
        <param name="HaarAdaPrior" value="200"/>
   </node> 


   <!-- Launch HaarDispAda Node-->
   <node name="HaarDispAdaNode" pkg="HaarDispAda" type="HaarDispAda174" output="screen" >	
	<param name="Q_Size" value="2" />
        <remap from="Color_Image" to="HaarAdaColorImage"/>	
        <remap from="Disparity_Image" to="HaarAdaDisparityImage"/>
        <remap from="input_rois" to="HaarAdaOutputRois"/>
        <!-- mode={detect,train,load,accumulate} -->
        <param name="mode" value="load"/>
        <param name="classifier_file" value="$(find HaarDispAda)/classifiers/HaarDispAda.xml"/>
        <param name="num_Training_Samples" value="1000"/>
        <param name="HaarDispAdaPrior" value="2.5"/>
   </node> 


   <!-- Launch HaarSvm Node-->
   <node name="HaarSvmNode" pkg="HaarSvm" type="HaarSvm8" output="screen">	  
	<param name="Q_Size" value="2" />
        <remap from="Color_Image" to="HaarDispAdaColorImage"/>	
        <remap from="Disparity_Image" to="HaarDispAdaDisparityImage"/>
        <remap from="input_rois" to="HaarDispAdaOutputRois"/>
        <!-- mode={detect,train,load,accumulate} -->
        <param name="mode" value="load"/>
        <param name="classifier_file" value="$(find HaarSvm)/classifiers/HaarSvm.xml"/>
        <param name="num_Training_Samples" value="1000"/>
        <param name="HaarSvmThreshold" value="0.75"/>
   </node> 


   <!-- Launch HogSvm Node-->
   <node name="HogSvmNode" pkg="HogSvm" type="HogSvm1" output="screen">	
	<param name="Q_Size" value="2" />
        <remap from="Color_Image" to="HaarSvmColorImage"/>	
        <remap from="Disparity_Image" to="HaarSvmDisparityImage"/>
        <remap from="input_rois" to="HaarSvmOutputRois"/>
        <!-- mode={detect,train,load,accumulate} -->
        <param name="mode" value="load"/>
        <param name="Hog_Block_File"  value="$(find HogSvm)/classifiers/Blocks.xml"/>
        <param name="classifier_file" value="$(find HogSvm)/classifiers/HogSvm.xml"/>
        <param name="num_Training_Samples" value="1000"/>
        <param name="HogSvmThreshold" value="0.75"/>
   </node> 

   <!-- Create True files with all the negative examples -->
   <node pkg="NegExamples" type="NegExampleNode" name="NegExampleNode" >
	<param name ="imageFolderPath" value="$(env NIST_IMAGES)/$(arg directory)" />
	<remap from ="Color_Image" to="HogSvmColorImage"/>
        <remap from ="Disparity_Image" to="HogSvmDisparityImage"/>
	<remap from ="input_rois" to="HogSvmOutputRois"/>  

   </node>
	
   <!-- display the rois -->
   <node pkg="roiViewer" type="roiViewer" name="HaarAdaViewer" >
        <param name="mode" type="string" value="roi_display"/> 
        <param name="label" type="int" value="1" />
	<remap from ="input_image" to="HogSvmColorImage"/>
	<remap from ="input_rois" to="HogSvmOutputRois"/>  
   </node>

</launch>
